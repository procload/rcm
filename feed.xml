<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RCM</title>
  <subtitle>RCM</subtitle>
  <id>http://ryanmerrill.net/</id>
  <link href="http://ryanmerrill.net/"/>
  <link href="http://ryanmerrill.net/feed.xml" rel="self"/>
  <updated>2018-02-13T07:00:00-05:00</updated>
  <author>
    <name>Ryan Merrill</name>
  </author>
  <entry>
    <title>Accessibility Basics for Developers</title>
    <link rel="alternate" href="http://ryanmerrill.net/2018/02/13/accessibility.html"/>
    <id>http://ryanmerrill.net/2018/02/13/accessibility.html</id>
    <published>2018-02-13T07:00:00-05:00</published>
    <updated>2018-02-13T16:42:43-05:00</updated>
    <author>
      <name>RCM</name>
    </author>
    <content type="html">&lt;p&gt;It's common to think that web accessibility only applies to screen readers and blind users, but the reality is much larger and more nuanced. With close to 25 percent of adults in the United States having some sort of disability, it's something too valuable to ignore. Breaking down accessibility into physical and environmental impairments can help us emphasize with our users' diverse abilities.&lt;/p&gt;

&lt;p&gt;We can separate physical disabilities into four buckets: vision, auditory, cognitive, and motor. These exist on a spectrum. A vision impairment could be something rudimentary such as having one's pupils dilated or as severe as a complete loss of eyesight. Whereas a motor impairment could be a broken arm or something more serious such as complete paralysis.&lt;/p&gt;

&lt;p&gt;We also need to keep in mind environmental factors. Users might be accessing the site in bright sunlight, watching a video in a loud or quiet environment, or visiting a site on low bandwidth. Developing with accessibility in mind also boosts the experience for everyone by ensuring there is more thought put into usability, simpler UI interactions, and enhanced features such as keyboard navigation.&lt;/p&gt;

&lt;p&gt;There are some quick and easy things developers and designers can do to improve accessibility. Using &lt;a href="https://webaim.org/techniques/alttext/"&gt;proper alt text on image tags&lt;/a&gt;, &lt;a href="https://webaim.org/techniques/skipnav/"&gt;providing a skip navigation link&lt;/a&gt;, &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;designing with a correct contrast ratio&lt;/a&gt;, and &lt;a href="https://dequeuniversity.com/assets/html/jquery-summit/html5/slides/landmarks.html"&gt;writing semantic markup&lt;/a&gt; are all low hanging fruit waiting to be tackled. Occam and Canon are supporting WCAG Level A accessibility standards, but are striving for AA to reach the greatest number of users. A human-readable checklist for each level can be found &lt;a href="https://wuhcag.com/wcag-checklist/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are tools available to help test a site's accessibility:
* &lt;a href="https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh?hl=en-US"&gt;Wave is a Chrome extension&lt;/a&gt; that will evaluate web accessibility of your site within the browser
* VoiceOver for Mac (FN+CMD+F5) is a built-in screen reader
* &lt;a href="https://leaverou.github.io/contrast-ratio/"&gt;Contrast Ratio Checker&lt;/a&gt; will tell you the contrast between 2 color hex values to ensure they meet requirements&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tips for Remote Work</title>
    <link rel="alternate" href="http://ryanmerrill.net/2017/05/17/remote.html"/>
    <id>http://ryanmerrill.net/2017/05/17/remote.html</id>
    <published>2017-05-17T12:21:00-04:00</published>
    <updated>2017-05-18T15:05:29-04:00</updated>
    <author>
      <name>RCM</name>
    </author>
    <content type="html">&lt;p&gt;I recently took a job at &lt;a href="http://8451.com/"&gt;84.51°&lt;/a&gt;, which means I'm no longer working remotely. The three years I did at &lt;a href="http://food52.com"&gt;Food52&lt;/a&gt; were great, but it was time for a change. I wrote-up some notes about how to help make things easier when working remotely.&lt;/p&gt;

&lt;p&gt;Communication is key. I would err on the side of over communicating anything than not. The only times I  regretted working remote was when I felt out of the loop. There were a number of strategies my team took to keep remote employees happy and engaged.&lt;/p&gt;

&lt;h2 id="slack-or-something"&gt;Slack or something&lt;/h2&gt;
&lt;p&gt;The team needs to feel included in daily activity and as a part of the company culture. One thing that went a far way for me was using Slack on a daily basis with the rest of the company. Despite being only 1 of 8 remote employees in a 70-person company, I often felt connected because using Slack was part of the company's culture even for those in the office.&lt;/p&gt;

&lt;p&gt;Slack had a great feature that allowed a user to quickly hop on a video or audio call to hash out a problem and to stay connected.&lt;/p&gt;

&lt;h2 id="daily-standup"&gt;Daily Standup&lt;/h2&gt;
&lt;p&gt;We created a daily standup channel for our team in Slack and each day the employees (remote or not) would write their top 3 tasks they were working on that day plus any blockers. It helped the remote employees stay in sync with the rest of the team.&lt;/p&gt;

&lt;h2 id="weekly-meetings"&gt;Weekly Meetings&lt;/h2&gt;
&lt;p&gt;We had weekly team meetings to discuss larger topics and projects the entire team was working on and if we had any blockers or anything else that would prevent us from getting our work done.&lt;/p&gt;

&lt;p&gt;We tried to schedule all of our meetings on Mondays so they would be out of the way for the rest of the week.&lt;/p&gt;

&lt;p&gt;I also had weekly 1:1s with my manager over Skype or Slack video. it was important for me to have these and them not be skipped because I sometimes felt out of the loop regarding what was going on at the compnay.&lt;/p&gt;

&lt;h2 id="regular-trips-to-the-office"&gt;Regular Trips to the Office&lt;/h2&gt;
&lt;p&gt;Since my company was based in NYC, it wasn't easy to get face time with other employees but we made an effort to fly in the remote team to the office every 6 weeks for an entire week. This was usually coupled by a few team dinners or happy hours, which helped bridge the gap between office and remote employee.&lt;/p&gt;

&lt;p&gt;I often found myself being the most motivated and getting the most done the week following a trip to NYC.&lt;/p&gt;

&lt;h2 id="in-office-meetings"&gt;In Office Meetings&lt;/h2&gt;
&lt;p&gt;It was easy for the team to fall into a trap of excluding remote workers from meetings or ignoring them when they are in a meeting. A big part of embracing a remote employee is to make sure they have a voice during a meeting and to keep them in mind when scheduling something.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Where's the Class Go?</title>
    <link rel="alternate" href="http://ryanmerrill.net/2016/03/01/anchor.html"/>
    <id>http://ryanmerrill.net/2016/03/01/anchor.html</id>
    <published>2016-03-01T11:21:00-05:00</published>
    <updated>2017-05-18T14:53:59-04:00</updated>
    <author>
      <name>RCM</name>
    </author>
    <content type="html">&lt;p&gt;There was a debate at work the other day concerning where to place a class on a given snippet of HTML. The HTML was used to markup a linked profile photo and the disagreement was whether or not to place the class on the anchor or the image tag. The markup is:&lt;/p&gt;

&lt;pre class="prettyprint lang-html"&gt;
div class="nr-comment-reply"
  a href="#"
    img src="http://placehold.it/100/100"
  /a
/div
&lt;/pre&gt;

&lt;p&gt;The CSS is:&lt;/p&gt;

&lt;pre class="prettyprint lang-css"&gt;
.c-avatar {
  display: block;
  float: left;
  border-radius: 19px;
  width: 38px;
  height: 38px;
}
&lt;/pre&gt;

&lt;p&gt;Since the avatar link and image combo is floated to the left, placing the class on the image removes the anchor element from the DOM. This wouldn’t appear to be a problem if you were fine removing focus on the entire element when tabbing through the page. For example: &lt;a href="http://cl.ly/fFwI"&gt;http://cl.ly/fFwI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefit of placing the CSS class on the anchor element is it keeps tab focus on the entire element as seen here: &lt;a href="http://cl.ly/fFxh"&gt;http://cl.ly/fFxh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Long story short: Put the class on the anchor tag if you care about tab focus.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Design Cheating</title>
    <link rel="alternate" href="http://ryanmerrill.net/2016/02/26/cheat.html"/>
    <id>http://ryanmerrill.net/2016/02/26/cheat.html</id>
    <published>2016-02-26T16:41:00-05:00</published>
    <updated>2017-05-18T14:53:59-04:00</updated>
    <author>
      <name>RCM</name>
    </author>
    <content type="html">&lt;p&gt;When designing the upcoming (Not)Recipes app for Food52, I often find myself searching for solutions that other apps have figured out previously and working to combine those into our app. At first I felt guilty of not innovating or becoming too mundane, but a recent quote from an &lt;a href="https://www.quora.com/profile/Wilson-Miner/session/95/?__snids__=1578084650&amp;amp;__nsrc__=4"&gt;interview with Wilson Miner&lt;/a&gt; helped assuage my fears:
&amp;gt; I think I overvalue "boring" design solutions relative to most other designers. And I don't mean I value simple solutions – I think that's pretty common – I mean boring: unexciting, nondescript, dull. I usually gravitate to and in teams often end up championing the most mundane solutions.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of my favorite quotes about design is attributed to Charles Eames: "Innovate as a last resort. More horrors are done in the name of innovation than any other."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I think it's natural as designers to feel like reusing an existing solution is somehow cheating or more likely just a missed opportunity to show our skill. But in my experience the more "innovative" solution often brings more value to the designer than it does to the product or the end-user.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is nothing more satisfying to me on a project than finding a fitting solution to a problem just lying around, integrating it as seamlessly as possible, and getting zero credit for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The whole &lt;a href="https://www.quora.com/profile/Wilson-Miner/session/95/?__snids__=1578084650&amp;amp;__nsrc__=4"&gt;QA on Quora&lt;/a&gt; is worth a read.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Custom Launch Screen for iOS</title>
    <link rel="alternate" href="http://ryanmerrill.net/2016/02/25/launchscreen.html"/>
    <id>http://ryanmerrill.net/2016/02/25/launchscreen.html</id>
    <published>2016-02-25T11:13:00-05:00</published>
    <updated>2017-05-18T14:53:59-04:00</updated>
    <author>
      <name>RCM</name>
    </author>
    <content type="html">&lt;p&gt;As we get closer to launching the &lt;a href="https://app.food52.com/"&gt;(Not)Recipes&lt;/a&gt; app at Food52 there are a bunch of small details that need to be ironed out. One of these details is the launch screen that users first encounter when launching the app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/LaunchImages.html"&gt;According to Apple&lt;/a&gt;, the launch screen should be something that fits this description:
&amp;gt; Remember, the launch image doesn’t provide you with an opportunity for artistic expression. It’s solely intended to enhance the user’s perception of your app as quick to launch and immediately ready for use.&lt;/p&gt;

&lt;p&gt;This means we should have an empty launch screen only showing the basic UI such as the tab bar and its icons and the nav bar. In our case it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Launch Screen" src="/images/2016/02/25/blank.png" /&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to do this is to create a LaunchScreen.storyboard file by going to:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Launch Adding" src="/images/2016/02/25/launch_adding.png" /&gt;&lt;/p&gt;

&lt;p&gt;After that you’ll need to set the launch screen in the project settings here:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Launch Settings" src="/images/2016/02/25/launch_settings.png" /&gt;&lt;/p&gt;

&lt;p&gt;Following that it’s just a matter of adding a few dummy UI elements to the storyboard. Since we have a tab bar in our app, we added an empty tab bar and its items to the launch screen storyboard:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Tab bar" src="/images/2016/02/25/tabbar.png" /&gt;&lt;/p&gt;

&lt;p&gt;We also adjusted the height of the navigation bar to reflect what it will look like on launch. Remember to set the Auto Layout constraints on both the tab bar and nav bar in order to keep things looking good on all device sizes.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Custom collections with Middleman</title>
    <link rel="alternate" href="http://ryanmerrill.net/2014/07/25/custom-collections.html"/>
    <id>http://ryanmerrill.net/2014/07/25/custom-collections.html</id>
    <published>2014-07-25T17:10:00-04:00</published>
    <updated>2017-05-18T14:53:59-04:00</updated>
    <author>
      <name>RCM</name>
    </author>
    <content type="html">&lt;p&gt;This site is based on the static-site generator Middleman, which has served
me well over the years.&lt;/p&gt;

&lt;p&gt;I had the opportunity to work on creating a blog that needed navigation to be built
using dynamic category names defined by an author when creating a new post. The category name
is stored in the article's front matter like so:&lt;/p&gt;

&lt;pre class="prettyprint ruby"&gt;
---
title: My Second Test
date: 2014-07-25 20:16 UTC
category: design
author: Ryan Merrill
tags: development, programming, swift
summary: This is the summary
---
&lt;/pre&gt;

&lt;p&gt;Middleman's blog extension comes built with tagging ability, but didn't offer support for categories.
Fortunately you can create custom collections easily:&lt;/p&gt;

&lt;pre class="prettyprint ruby"&gt;
activate :blog do |blog|
  blog.custom_collections = {
    category: {
      link: '/categories/{category}.html',
      template: '/category.html'
    }
  }
end
&lt;/pre&gt;

&lt;p&gt;After that, I needed to find all of the categories defined by the author to build the navigation. A handy
helper method fixed that:&lt;/p&gt;

&lt;pre class="prettyprint ruby"&gt;
  def build_categories(articles)
    categories = []
    articles.each do |article|
      category = article.metadata[:page]['category']
      categories.push(category) unless categories.include? category
    end
    return categories
  end
&lt;/pre&gt;

&lt;p&gt;It was just a matter of passing the blog's articles to the helper to finish building the site's navigation.&lt;/p&gt;
</content>
  </entry>
</feed>
